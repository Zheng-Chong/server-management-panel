name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test application startup
      run: |
        # Set environment variables for testing
        export SECRET_KEY=test-secret-key
        export FLASK_ENV=testing
        
        # Initialize database for testing
        python init_database.py
        
        # Test if application can start (run for 5 seconds then kill)
        timeout 5s python app.py || if [ $? -eq 124 ]; then echo "Application started successfully"; else exit 1; fi

    - name: Security scan with bandit
      run: |
        pip install bandit
        bandit -r . -f json || true

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create deployment package
      run: |
        # Create a clean deployment package
        mkdir -p dist
        cp -r templates dist/
        cp app.py database.py init_database.py reset_password.py requirements.txt dist/
        cp deploy.sh start.sh dist/
        cp README.md LICENSE DEPLOYMENT.md CONTRIBUTING.md dist/
        
        # Create deployment archive
        cd dist
        tar -czf ../server-management-panel.tar.gz .
        cd ..

    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: server-management-panel.tar.gz
